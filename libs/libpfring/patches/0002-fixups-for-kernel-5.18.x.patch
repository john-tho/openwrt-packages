From 7765d21fb64a32890f377941f64ba3ebce98bcf5 Mon Sep 17 00:00:00 2001
From: RayFoulk <rfoulk@gmail.com>
Date: Thu, 25 Aug 2022 13:24:42 -0500
Subject: [PATCH] fixups for kernel 5.18.x

---
 .../intel/e1000e/e1000e-3.8.7-zc/src/ethtool.c | 14 ++++++++++++++
 .../i40e/i40e-2.17.4-zc/src/i40e_ethtool.c     | 14 ++++++++++++++
 .../intel/i40e/i40e-2.17.4-zc/src/i40e_txrx.c  |  5 +++++
 .../ixgbe/ixgbe-5.5.3-zc/src/ixgbe_ethtool.c   | 15 +++++++++++++++
 .../ixgbevf-4.5.1-zc/src/ixgbevf_ethtool.c     | 14 ++++++++++++++
 kernel/pf_ring.c                               | 18 ++++++++++++++++++
 6 files changed, 80 insertions(+)

--- a/drivers/intel/e1000e/e1000e-3.8.7-zc/src/ethtool.c
+++ b/drivers/intel/e1000e/e1000e-3.8.7-zc/src/ethtool.c
@@ -1008,8 +1008,15 @@ static void e1000_get_drvinfo(struct net
 		sizeof(drvinfo->bus_info));
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static void e1000_get_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static void e1000_get_ringparam(struct net_device *netdev,
 				struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct e1000_adapter *adapter = netdev_priv(netdev);
 
@@ -1019,8 +1026,15 @@ static void e1000_get_ringparam(struct n
 	ring->tx_pending = adapter->tx_ring_count;
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static int e1000_set_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static int e1000_set_ringparam(struct net_device *netdev,
 			       struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct e1000_adapter *adapter = netdev_priv(netdev);
 	struct e1000_ring *temp_tx = NULL, *temp_rx = NULL;
--- a/drivers/intel/i40e/i40e-2.17.4-zc/src/i40e_ethtool.c
+++ b/drivers/intel/i40e/i40e-2.17.4-zc/src/i40e_ethtool.c
@@ -2239,8 +2239,15 @@ static void i40e_get_drvinfo(struct net_
 #endif
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static void i40e_get_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static void i40e_get_ringparam(struct net_device *netdev,
 			       struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct i40e_netdev_priv *np = netdev_priv(netdev);
 	struct i40e_pf *pf = np->vsi->back;
@@ -2267,8 +2274,15 @@ static bool i40e_active_tx_ring_index(st
 	return index < vsi->num_queue_pairs;
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static int i40e_set_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static int i40e_set_ringparam(struct net_device *netdev,
 			      struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct i40e_ring *tx_rings = NULL, *rx_rings = NULL;
 	struct i40e_netdev_priv *np = netdev_priv(netdev);
--- a/drivers/intel/i40e/i40e-2.17.4-zc/src/i40e_txrx.c
+++ b/drivers/intel/i40e/i40e-2.17.4-zc/src/i40e_txrx.c
@@ -2693,7 +2693,12 @@ static struct sk_buff *i40e_run_xdp(stru
 			rx_ring->xdp_stats.xdp_redirect_fail++;
 		break;
 	default:
+#ifdef NEED_NO_NETDEV_PROG_XDP_WARN_ACTION
 		bpf_warn_invalid_xdp_action(act);
+#else
+		bpf_warn_invalid_xdp_action(rx_ring->netdev, xdp_prog, act);
+#endif
+
 		/* fallthrough -- abort and drop */
 	case XDP_ABORTED:
 		trace_xdp_exception(rx_ring->netdev, xdp_prog, act);
--- a/drivers/intel/ixgbe/ixgbe-5.5.3-zc/src/ixgbe_ethtool.c
+++ b/drivers/intel/ixgbe/ixgbe-5.5.3-zc/src/ixgbe_ethtool.c
@@ -1383,8 +1383,16 @@ static void ixgbe_get_drvinfo(struct net
 #endif
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static void ixgbe_get_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
+
 static void ixgbe_get_ringparam(struct net_device *netdev,
 				struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct ixgbe_adapter *adapter = netdev_priv(netdev);
 
@@ -1398,8 +1406,15 @@ static void ixgbe_get_ringparam(struct n
 	ring->rx_jumbo_pending = 0;
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static int ixgbe_set_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static int ixgbe_set_ringparam(struct net_device *netdev,
 			       struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct ixgbe_adapter *adapter = netdev_priv(netdev);
 	struct ixgbe_ring *temp_ring;
--- a/drivers/intel/ixgbevf/ixgbevf-4.5.1-zc/src/ixgbevf_ethtool.c
+++ b/drivers/intel/ixgbevf/ixgbevf-4.5.1-zc/src/ixgbevf_ethtool.c
@@ -400,8 +400,15 @@ static void ixgbevf_get_drvinfo(struct n
 #endif /* HAVE_ETHTOOL_GET_SSET_COUNT && HAVE_SWIOTLB_SKIP_CPU_SYNC */
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static void ixgbevf_get_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static void ixgbevf_get_ringparam(struct net_device *netdev,
 				  struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct ixgbevf_adapter *adapter = netdev_priv(netdev);
 
@@ -411,8 +418,15 @@ static void ixgbevf_get_ringparam(struct
 	ring->tx_pending = adapter->tx_ring_count;
 }
 
+#ifdef HAVE_ETHTOOL_EXTENDED_RINGPARAMS
+static int ixgbevf_set_ringparam(struct net_device *netdev,
+		  struct ethtool_ringparam *ring,
+		  struct kernel_ethtool_ringparam __always_unused *kernel_rp,
+		  struct netlink_ext_ack __always_unused *extack)
+#else /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 static int ixgbevf_set_ringparam(struct net_device *netdev,
 				 struct ethtool_ringparam *ring)
+#endif /* HAVE_ETHTOOL_EXTENDED_RINGPARAMS */
 {
 	struct ixgbevf_adapter *adapter = netdev_priv(netdev);
 	struct ixgbevf_ring *tx_ring = NULL, *rx_ring = NULL;
--- a/kernel/pf_ring.c
+++ b/kernel/pf_ring.c
@@ -4815,9 +4815,16 @@ static struct dma_memory_info *allocate_
       i + 1, dma_memory->num_slots, slot, offset);
 
     dma_memory->dma_addr[i] = cpu_to_le64(
+
+#if(LINUX_VERSION_CODE < KERNEL_VERSION(5,18,0))
       pci_map_single(to_pci_dev(dma_memory->hwdev), slot,
                      dma_memory->slot_len,
                      PCI_DMA_BIDIRECTIONAL));
+#else
+      dma_map_single(dma_memory->hwdev, slot,
+                     dma_memory->slot_len,
+                     DMA_BIDIRECTIONAL));
+#endif
 
     if(dma_mapping_error(dma_memory->hwdev, dma_memory->dma_addr[i])) {
       printk("[PF_RING] %s: Error mapping DMA slot %d of %d \n", __FUNCTION__, i + 1, dma_memory->num_slots);
@@ -4840,7 +4847,12 @@ static void free_extra_dma_memory(struct
       if(dma_memory->dma_addr[i]) {
         dma_unmap_single(dma_memory->hwdev, dma_memory->dma_addr[i],
 	                 dma_memory->slot_len,
+#if(LINUX_VERSION_CODE < KERNEL_VERSION(5,18,0))
 	                 PCI_DMA_BIDIRECTIONAL);
+#else
+	                 DMA_BIDIRECTIONAL);
+#endif
+
       }
     }
     kfree(dma_memory->dma_addr);
@@ -5830,7 +5842,13 @@ static int pf_ring_inject_packet_to_stac
   skb->protocol = eth_type_trans(skb, netdev);
   skb->queue_mapping = 0xffff;
 
+#if(LINUX_VERSION_CODE < KERNEL_VERSION(5,18,0))
   err = netif_rx_ni(skb);
+#else
+  local_bh_disable();
+  err = netif_rx(skb);
+  local_bh_enable();
+#endif
 
   if(unlikely(debug_on(2) && err == NET_RX_SUCCESS))
     debug_printk(2, "Packet injected into the linux kernel!\n");
